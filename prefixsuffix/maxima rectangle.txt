question : find the maximum area of rectange in 2d matrix

idea : get cumulative sum  height for each row and update area for each  row 

intution : since it's a 2d matrix  , we have to find area , to find area we can do is
considered a array that account height , for first row  , will have row[0] elem as hieght  , 
and row 1 to n will we can get cummulaive sum , for each row will take out cumulatuve sum of each colum 
and find the area , (to find area will follow - (nse - pse +1 ) to get length * hieght[i])
and keep updating for each row ;

example : Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 6

 
 //-----------------------------------------------//


class Solution {
public:
    void findnextsmall(vector<int>& height, vector<int>& nextsmall) {
        stack<int> st;
        int n = height.size();
        for (int i = n - 1; i >= 0; i--) {
            while (!st.empty() and height[st.top()] >= height[i]) {
                st.pop();
            }
            if (!st.empty()) {
                nextsmall[i] = st.top() - 1;
            } else {
                nextsmall[i] = n - 1; // outof bound index
            }
            st.push(i);
        }
    }
    void findprevsmall(vector<int>& height, vector<int>& prevsmall) {
        stack<int> st;
        int n = height.size();
        for (int i = 0; i < n; i++) {
            while (!st.empty() and height[st.top()] >= height[i]) {
                st.pop();
            }
            if (!st.empty()) {
                prevsmall[i] = st.top() + 1;
            } else {
                prevsmall[i] = 0;
            }
            st.push(i);
        }
    }
    int findmaxArea(vector<int>& height) {
        int n = height.size();
        vector<int> prevsmall(n, 0);
        vector<int> nextsmall(n, 0);
        int maxArea = 0;
        findnextsmall(height, nextsmall);
        findprevsmall(height, prevsmall);
        for (int i = 0; i < n; i++) {
            maxArea = max(maxArea ,height[i] * (nextsmall[i] - prevsmall[i] + 1));
        }
        return maxArea;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        int maxArea = INT_MIN;
        vector<int> height(m);
        for (int i = 0; i < n; i++) {
            height[i] = (matrix[0][i] == '1') ? 1 : 0;
        }
        maxArea = findmaxArea(height);

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (matrix[i][j] == '0') {
                    height[j] = 0;
                } else {
                    height[j] += 1;
                }
            }
            maxArea = max(maxArea, findmaxArea(height));
        }
        return maxArea;
    }
};
