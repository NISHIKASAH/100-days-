Given an integer array nums and two integers firstLen and secondLen, return the maximum 
sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.
The array with length firstLen could occur before or after the array with 
length secondLen, but they have to be non-overlapping.

A subarray is a contiguous part of an array.

example  : Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.

/------------------------------------------------/
 class Solution {
public:
int solve(vector<int>&nums, int x, int y){
    int n = nums.size();
    vector<int>prefix(n);
    vector<int>suffix(n);
    int sum = 0;
    for(int i=0;i<n;i++){
        if(i<x){
            sum += nums[i];
            prefix[i] = sum;
        }
        else{
            sum += nums[i] - nums[i-x];
            prefix[i]  = max(prefix[i-1] ,sum);
        }
    }
    sum =0 ;
    for(int j =n-1; j>=0; j--){
        if(j+y>=n){
            sum += nums[j];
            suffix[j] = sum ;

        }
        else{
            sum += nums[j]-nums[j+y];
            suffix[j] =  max(suffix[j+1] , sum);
        }
    }
    int ans =INT_MIN;
    for(int i=x-1 ;i<n-y;i++){
        ans = max(ans ,prefix[i] + suffix[i+1] );

    }
    return ans;
}
    int maxSumTwoNoOverlap(vector<int>& nums, int x, int y) {
        int ans1 = solve(nums, x, y);
        int ans2 = solve(nums , y,x);
        return max(ans1 , ans2);
    }
};