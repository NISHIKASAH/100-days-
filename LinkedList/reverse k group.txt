question : reverse group of k linkedlist .

intution : reverse a list till curr != NULL and count<k and 
now for next group to reserve pass curr , prev
and head->next = reversecall(curr , k);
return prev.

edge case : head->next == null and linkedlistlen<k 
//-------------------------------------------------------//

class Solution {
public:

int getLength(ListNode* head) {
    int len = 0;
    ListNode * curr = head;
    while(curr!=NULL){
        len++;
        curr = curr->next;
    }
    return len;
}
    ListNode* reverseKGroup(ListNode* head, int k) {
       if(head == NULL  || getLength(head)<k){
        return head;
       }
       ListNode * next = NULL;
       ListNode * prev = NULL;
       ListNode * curr = head;
       int count= 0;
       while(curr!=NULL && count!=k){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
        count++;

       }
       head->next = reverseKGroup(curr , k);
       return prev;
    }
};
