question : its is use for sorting array .
There is 2 ways for doing it.
1.Khan's algorithm 
2. using stack.

//-------------KHAN'S ALGORIHTM------------------------------//
class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int v, vector<int> adj[]) 
	{
	    int indegree[v] = {0};
	    for(int i=0;i<v;i++){
	        for(auto it:adj[i]){
	            indegree[it]++;
	            
	        }
	    }
	    queue<int>q;
	    for(int i=0;i<v;i++){
	        if(indegree[i] == 0){
	            q.push(i);
	        }
	    }
	    vector<int>ans;
	    while(!q.empty()){
	        int node = q.front();
	        q.pop();
	        ans.push_back(node);
	        for(auto it:adj[node]){
	            indegree[it] -- ;
	            if(indegree[it] == 0){
	                q.push(it);
	            }
	        }
	    }
	    return ans;
	}
};

//----------------------------USING STACK----------------------------------------//

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	void dfs(vector<int>adj[] , vector<int>&vis , int node , stack<int>&st){
	    vis[node] = 1;
	    for(auto it : adj[node]){
	        if(vis[it] == -1){
	            dfs(adj , vis , it , st);
	        }
	    }
	    st.push(node);
	} 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    vector<int>vis(V,-1);
	    stack<int>st;
	    for(int i=0;i<V;i++){
	        if(vis[i] ==-1){
	            dfs(adj , vis , i ,st);
	        }
	    }
	    vector<int>ans;
	    while(!st.empty()){
	        ans.push_back(st.top());
	        st.pop();
	    }
	    
	    return ans;
	}
};