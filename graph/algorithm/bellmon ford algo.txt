question : question : to find the shortest distance(wt)  from source to all other node.
Note : dijkstra does not work for negative elem or negative cycle .
this also is also use to detect negative cycle in a graph.

intution : relax the cycle for numofnode-1 times ,relax here means  
update the dist  of v before that update u node distance.
if(dist[u] !=INT_MAX and dist[u] + wt < dist[v]) {
    then update dist[v] = dist[u] + wt;
}
dist[u]!=INT_MAX means u has already being relax.

to check cycle relax adjnode ,if its update to smaller dist , that mean their 
exist a cycle.

//----------------------------------------------//

class Solution {
  public:
    /*  Function to implement Bellman Ford
    *   edges: vector of vectors which represents the graph
    *   S: source vertex to start traversing graph with
    *   V: number of vertices
    */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int s) {
        vector<int>dist(V,1e8);
        dist[s] = 0;
        for(int i=0;i<V-1;i++){
            for(auto it : edges){
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] != 1e8 and dist[u] + wt < dist[v]){
                dist[v] = dist[u] + wt;
            }
        }
        }
        for(auto it : edges){
            int u  = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] !=  1e8 and dist[u] + wt < dist[v]){
                return {-1};
            }
        }
        return dist;
    
    }
};