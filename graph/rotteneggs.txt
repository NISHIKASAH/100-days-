class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int ans=0;
        queue<pair<pair<int,int>,int>> q;
        vector<vector<int>> vis(n,vector<int> (m,0));
        int fresh=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    vis[i][j]=2;
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        int drow[4]={0,+1,0,-1};
        int dcol[4]={+1,0,-1,0};
        int cnt=0;
        while(!q.empty()){
            int i=q.front().first.first;
            int j=q.front().first.second;
            int t=q.front().second;
            q.pop();
            ans=max(ans,t);
            for(int k=0;k<4;k++){
                int row=i+drow[k];
                int col=j+dcol[k];
                if(row<n and col<m and row>=0 and col>=0 and grid[row][col]==1 and vis[row][col]!=2){
                    q.push({{row,col},t+1});
                    vis[row][col]=2;
                    cnt++;
                }
            }
        }
        if(cnt!=fresh){
            return -1;
        }
        return ans;
    }
};