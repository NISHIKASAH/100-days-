
Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent 
cells are horizontally or vertically neighboring. 
The same letter cell may not be used more than once in a word.

Example : 
Input: board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

//-------------------------------------------------------------------------//

class Solution {
public:
    struct trienode {
        trienode* children[26];
        bool endofword;
        string word;
    };
    int n;
    int m;
    vector<string> ans;
    trienode* getNode() {
        trienode* node = new trienode();
        node->word = "";
        node->endofword = false;
        for (int i = 0; i < 26; i++) {
            node->children[i] = NULL;
        }
        return node;
    }
    void insert(trienode* root, string word) {
        trienode* crawl = root;
        for (auto ch : word) {
            if (crawl->children[ch - 'a'] == NULL) {
                crawl->children[ch - 'a'] = getNode();
            }
            crawl = crawl->children[ch - 'a'];
        }
        crawl->endofword = true;
        crawl->word = word;
    }
    int delrow[4] = {-1, 0, 1, 0};
    int delcol[4] = {0, 1, 0, -1};

    void dfs(int i, int j, trienode* root, vector<vector<char>>& board) {
        if (i < 0 || i >= n || j < 0 || j >= m || board[i][j] == '$' ||
            root->children[board[i][j] - 'a'] == NULL) {
            return;
        }
        root = root->children[board[i][j] - 'a'];
        if (root->endofword == true) {
            ans.push_back(root->word);
            root->endofword = false;
        }
        char ch = board[i][j];
        board[i][j] = '$';
        for (int k = 0; k < 4; k++) {
            int nrow = i + delrow[k];
            int ncol = j + delcol[k];
            dfs(nrow, ncol, root, board);
        }
        board[i][j] = ch;
    }
    vector<string> findWords(vector<vector<char>>& board,
                             vector<string>& words) {
        trienode* root = getNode();
        n = board.size();
        m = board[0].size();
        for (auto ch : words) {
            insert(root, ch);
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                char ch = board[i][j];
                if (root->children[ch - 'a'] != NULL) {
                    dfs(i, j, root, board);
                }
            }
        }
        return ans;
    }
};