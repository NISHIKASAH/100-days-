find max no of cherries that can be picked , traversing from 0,0 to n-1,n-1 and back to 0,0 

0 means the cell is empty, so you can pass through,
1 means the cell contains a cherry that you can pick up and pass through, or
-1 means the cell contains a thorn that blocks your way.

/-----------------------------------------/
class Solution {
public:
    int dp[51][51][51][51];

    int cp(int r1, int c1, int r2, int c2, vector<vector<int>>& arr, int n) {
        if (r1 >= n || c1 >= n || r2 >= n || c2 >= n || arr[r1][c1] == -1 ||
            arr[r2][c2] == -1) {
            return INT_MIN;
        }
        if (r1 == n - 1 and c1 == n - 1)
            return arr[r1][c1];
        if (r2 == n - 1 and c2 == n - 1)
            return arr[r2][c2];
        if (dp[r1][c1][r2][c2] != -1)
            return dp[r1][c1][r2][c2];

        int cherries = 0;
        if (r1 == r2 and c1 == c2) {
            cherries += arr[r1][c1];
        } else {
            cherries += arr[r1][c1] + arr[r2][c2];
        }

            
        int f1 = cp(r1, c1+1, r2, c2+1, arr , n); // h, h
        int f2 = cp(r1+1, c1, r2, c2+1, arr ,n); // v, h
        int f3 = cp(r1+1, c1, r2+1, c2, arr,n); // v, v
        int f4 = cp(r1, c1+1, r2+1, c2, arr,n); // h, v
              
        cherries+=max({f1,f2,f3,f4});
        
        return dp[r1][c1][r2][c2] = cherries;
    }

    int cherryPickup(vector<vector<int>>& arr) {
        int n = arr.size();
        memset(dp ,-1,sizeof(dp));
        if (arr.size() == 1 and arr[0][0] == 1)
            return 1;
        int ans = cp(0, 0, 0, 0, arr, n);
        return ans < 0 ? 0 : ans;
    }
};