question : combine the s1 and s2 to form s3

intution : use 3 pointer for s1 ,s2,s3 and three case may arise, 
case 1 : s1 and s2 and s3 elem are same  ,s3 elem can be of s1 or s2 so all for both
cas32 : s1 and s3 elem can match so call for next i+1 , j , k+1.
case3  : s2 and s3 elem can match so call for next i ,j+1 , k+1.
Note : use dp to store the value .
if i and j  and k  reach to end  mean all elem match return true.
if any one end return false.


//----------------------------------------------------------//


class Solution {
public:
  int n;
        int m ;
        int p;
int solve(int i ,int j,int k ,string s1 ,string s2 , string s3 , vector<vector<int>>&dp){
    if(i>=n and j>=m and k>=p){
        return true;
    }
    if(i>n|| j>m ){
        return false;
    }
    if(dp[i][j] !=-1){
        return dp[i][j];
    }
    if(s1[i] ==s3[k] and s2[j] ==s3[k]){
        return  dp[i][j] = (solve(i+1 , j , k+1 , s1,s2,s3 ,dp)|| solve(i ,j+1 , k+1 ,s1,s2,s3,dp));
    }
    else if(s1[i] == s3[k]){
        return dp[i][j] =  solve(i+1 , j ,k+1 ,s1,s2,s3,dp);
    }
    else if(s2[j] == s3[k]){
        return  dp[i][j] = solve(i ,j+1 , k+1 , s1,s2,s3,dp);
    }
    else return dp[i][j] = false;
}
    bool isInterleave(string s1, string s2, string s3) {
         n =s1.size();
         m = s2.size();
         p = s3.size();
        vector<vector<int>>dp(n+1,vector<int>(m+1,-1));
        return solve(0 , 0,0,s1,s2,s3,dp);
        
    }
};
