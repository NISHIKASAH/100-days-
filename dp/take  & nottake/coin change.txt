question : return fewest no of coins to make up the target . 

intution : for base case check how many coins  are need to makeup the target . 
idx==0 then  if amount%arr[i]==0 then amount/arr[idx]

and apply take or notTake with dp (idx , amount)


//---------------------------------------------------//

class Solution {
public:
    int solve(int ind,int amount,vector<int> &nums,vector<vector<int>> &dp){
        if(ind==0){
            if(amount%nums[ind]==0){
                return amount/nums[ind];
            }
            return 1e8;
        }
        if(dp[ind][amount]!=-1){
            return dp[ind][amount];
        }
        int nottake=solve(ind-1,amount,nums,dp);
        int take=1e8;
        if(nums[ind]<=amount){
            take=1+solve(ind,amount-nums[ind],nums,dp);
        }
        return dp[ind][amount]=min(take,nottake);
    }
    int coinChange(vector<int>& coins, int amount) {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int> (amount+1,-1));
        int ans=solve(n-1,amount,coins,dp);
        if(ans==1e8){
            return -1;
        }
        return ans;
    }
};