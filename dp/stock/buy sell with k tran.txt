question : find the best time to buy and sell the stock , when only k transaction can be made , 
to maximize the profit.

intution : you can either buy or sell  , in while buy there is 2 possibilty  of buy or not buying
and same goes for selling. what ever profit made is made is assigned in dp[ithday][buy/sell][k]

Note : after selling and complete transaction is made so do k-1
when k==0 return 0 profit;
//----------------------------------//


class Solution {
public:
    int solve(int ind,vector<int> &prices,vector<vector<vector<int>>> &dp,int buy,int k){
        if(ind==prices.size()){
            return 0;
        }
        if(k==0){
            return 0;
        }
        if(dp[ind][buy][k]!=-1){
            return dp[ind][buy][k];
        }
        int profit=0;
        if(buy==1){
            int take=-prices[ind]+solve(ind+1,prices,dp,0,k);
            int nottake=0+solve(ind+1,prices,dp,1,k);
            profit=max(take,nottake);
        }
        else{
            int take=prices[ind]+solve(ind+1,prices,dp,1,k-1);
            int nottake=0+solve(ind+1,prices,dp,0,k);
            profit=max(take,nottake);
        }
        return dp[ind][buy][k]=profit;
    }
    int maxProfit(int k, vector<int>& prices) {
        int n=prices.size();
        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (k+1,-1)));
        return solve(0,prices,dp,1,k);
    }
};