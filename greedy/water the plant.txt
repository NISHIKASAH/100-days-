sprinkler with range x that can water from i-x to i+x range of garden  , 
find min no of taps required open to water all garden

idea - iterate over left range and keep track of rightrange , if i taps cannot water target (right or curr)
then open and new tap  , and new target is formed , if maxRangeonright < target ,cannot water all grnd , 
do this till target reach n ; 


class Solution{
    public:
    int min_sprinklers(int arr[], int n)
    {
        vector<pair<int,int>>vec;
        for(int i=0;i<n ;i++){
            int left = max(0 , i-arr[i]);
            int right = min(n-1 , arr[i]+i);
            vec.push_back({left , right});
            
        }
        sort(vec.begin()  , vec.end());
        int maxRight = 0;
        int tap = 0;
        int target = 0;
        int i=0;
        while(target<n){
          while(i<n){
              if(vec[i].first <= target){
                  maxRight = max(maxRight , vec[i].second);
                  i++;
              }
              else{
                  break;
              }
          }
          if(maxRight <target){
              return -1;
          }
          tap++;
          target = maxRight+1;
            
        }
        return tap;
        
    }
};
