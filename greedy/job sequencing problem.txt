to do max jobs 

idea : sort in decreasing order (get more time , to do more jobs) ;
create  a array of len  max deadline from job 
and for each job ,loop over deadline array to check for availabity 

/*
struct Job 
{
 
    int id;	 // Job Id 
    int dead; // Deadline of job 
    int profit; // Profit if job is over before or on deadline 
};
*/
class Solution 

{
    public:
    static bool comp(Job a  , Job b) {
    if(a.profit > b.profit) return true;
    return false;

};
    //Function to find the maximum profit and the number of jobs done.
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        sort(arr , arr+n , comp);
        int dueDate = INT_MIN;
        for(int i=0;i<n;i++){
            dueDate = max(arr[i].dead , dueDate);
            
        }
        vector<int>deadline(dueDate+1 , -1);
        int profit= 0;
        int count= 0;
        for(int i=0;i<n;i++){
            int lastday = arr[i].dead;
            for(int j = lastday ; j>0;j--){
                if(deadline[j] == -1){
                    deadline[j] = 1;
                    count++;
                    profit += arr[i].profit;
                    break;
                }
            }
                
            }
        
        return {count , profit};
    } 
};