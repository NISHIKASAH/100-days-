question : find subarray that has max sum , this sum array can be circular . 

intution : considered circualr part to be maxsum , then mid part of array is claiming 
to be minsum . 
to find maxsum -find  totalsum - minsum .
steps to follow -
find -totalsum , minsum , maxsum  .
to get circuralsum = totalsum = totalsum - minsum .
for edge case [-1 , -1, -1] , check of maxsum >0 then return max(maxsum , circuralsum)
else return maxsum.(i.e subarray found in straight array)

//-------------------------------------------------//

class Solution {
public:
  int n ;
void maxSum(vector<int>&nums , int &maxsum){
    int sum = nums[0];
    for(int i=1;i<n;i++){
        sum = max(sum + nums[i] , nums[i]);
        maxsum = max(maxsum , sum);
    }

}
void minSum(vector<int>&nums , int &minsum){
    int sum =0;
    for(int i=1;i<n;i++){
        sum = min(sum + nums[i] , nums[i]);
        minsum = min(minsum , sum);
    }
}
    int maxSubarraySumCircular(vector<int>& nums) {
      int totalsum = 0;
      n = nums.size();
    
      for(int i=0;i<n;i++){
        totalsum += nums[i];
      }
      int maxsum = nums[0];
      int minsum = nums[0];
      maxSum(nums , maxsum);
      minSum(nums  ,minsum);

      int circlesum = totalsum - minsum ;
      if(maxsum > 0){
        return max(maxsum , circlesum);
      }
      else return maxsum;

        
    }
};


