function : find the lowest common ancestor of node. 

intuition : check  node is found then return root , 
call for left and rigt child and if left child is not there return right  , 
vice versa , if left and right both are present  then return root.


//--------------------------------------------------//

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL) return NULL;
        if(root == p|| root  == q){
            return root;
        }
        TreeNode* left = lowestCommonAncestor(root->left,p,q);
        TreeNode*  right = lowestCommonAncestor(root->right,p,q);
       if(left == NULL) return right;
        if(right == NULL) return left;
        else if(left and right){
            return root;
        }
        return NULL;
    }
};