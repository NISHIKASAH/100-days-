partion string and each partion elem mast no be present in other .
Input: s = "ababcbacadefegdehijhklij"
Output: [9,7,8]
Explanation:
The partition is "ababcbaca", "defegde", "hijhklij".
This is a partition so that each letter appears in at most one part.
A partition like "ababcbacadefegde", "hijhklij" is incorrect, because it splits s into less parts. 

/----------------------------------------------/

Idea - store lastidx of elements ,
now for each ith elem ,for a window and within window check if elem char is present outside window then expand end 
to get len of partion(end-start+1) , and start new partion from i = end+1;


class Solution {
public:
    vector<int> partitionLabels(string s) {
        map<char,int>mp;
        vector<int>ans;
        for(int i=0;i<s.size();i++){
            mp[s[i]-'a']=i;
        }
        for(int i=0;i<s.size() ;){
            int start = i; 
            int end= mp[s[i]-'a'];
            for(int inner=start+1 ; inner<=end-1 ; inner++){
                int elemidx = mp[s[inner]-'a'];
                if(elemidx > end){
                    end = elemidx;
                }

            }
            ans.push_back(end-start+1);
            i = end+1;
            
            
        }
        return ans;
    }
};